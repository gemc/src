- add frameworks and libraries by dragging it into "Frameworks" directory.
  * frameworks can be embedded in binary (products destination) to run it on the build, uncheck copy only when installing
  * libraryies can be copied to products destination (no subpath) to run it on the build uncheck copy only when installing

 - if problems with plugin "cocoa":
   * can set QT_DEBUG_PLUGINS to 1 in the env variables for more debugging
   * can set QT_PLUGIN_PATH to plugin locations (cocoa plugin is under platforms there), currently /opt/jlab_software/2.4/Darwin_macosx10.15-clang12.0.0/qt/system/clang_64/plugins

- qtframeworks (qt5, note 6 are different): QtCore, QtGui, QtWidgets, QtOpenGL, QtPrintSupport:

open $QTDIR/lib

- glibrary libs:

open $GLIBRARY/lib/

- clhep: clhep-version.dylib

open $CLHEP_BASE_DIR/lib/

- xerces-c: xerces-c-version.dylib

open $XERCESCROOT/lib/

- geant4: add all libraries

open $G4ROOT/4.10.06.p02MT/lib/

GEMC 3 reminders:

1. set MT option in go_geant4
2. set DG4MULTITHREADED in loadgeant4.py

 Pre-processor
 Found with scons SHOWBUILD=1
 Can paste in one line in Build Settings - preprocessor macro.
 For example G4MULTITHREADED will change the meaning of G4cout (will use G4cout_p instead)
 -DG4OPTIMISE -DG4_STORE_TRAJECTORY -DG4VIS_USE_OPENGL -DG4UI_USE_TCSH -DG4INTY_USE_QT  -DG4UI_USE_QT -DG4VIS_USE_OPENGLQT -DG4USE_STD11 -DG4MULTITHREADED
   G4OPTIMISE=1 G4_STORE_TRAJECTORY=1 G4VIS_USE_OPENGL=1 G4UI_USE_TCSH=1 G4INTY_USE_QT=1  G4UI_USE_QT=1 G4VIS_USE_OPENGLQT=1 G4USE_STD11=1 G4MULTITHREADED=1

GEMC

 Code conventions
 - camel case for all variable names, class definitions
 - type definitions start with Capital Letter
 - instances start with lowercase letter
 - shared variables should contain "shared" / "global" in the name
 - thread-local variable should contain "local" / "tlocal" / "thread"
 - source filenames starts with Capital letters << maybe not



	// the exampleResources.rcc is obtained with:
	// rcc -binary exampleResources.qrc -o exampleResources.rcc
	// it is needed in the executable dir in case it is compiled by xcode
	// scons on the other hand knows about it because the qt module
	// compiles exampleResources.qrc directly
