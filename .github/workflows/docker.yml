# Build & Publish GitHub Container Registry (GHCR) Images
name: GHCR Images

on:
  push:
    branches: [ main ]     # publish on main updates
    tags: [ 'v*' ]     # (optional) also publish on repo tags
  pull_request:            # PRs: build only (no push)

concurrency:
  group: ghcr-${{ github.ref }}   # cancel older runs on the same ref
  cancel-in-progress: true

jobs:
  discover:
    name: Discover Dockerfiles
    runs-on: ubuntu-latest
    # Expose the step outputs to downstream jobs
    outputs:
      matrix: ${{ steps.scan.outputs.matrix }}
      image: ${{ steps.scan.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Run the sh discovery script which writes to $GITHUB_OUTPUT:
      #   - matrix: JSON {"include":[{file,tag,os,latest},...]}
      #   - image : "ghcr.io/<owner>/gemc"
      - id: scan
        name: Build matrix
        run: ci/discover-docker-matrix.sh

  build:
    name: Build ${{ matrix.tag }} on ${{ matrix.os }}
    needs: discover
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write    # needed to push to GHCR
    strategy:
      fail-fast: false
      # Use the JSON produced by ci/discover-docker-matrix.sh
      matrix: ${{ fromJSON(needs.discover.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Enable emulation so we can build for both amd64 & arm64 on x86 runners
      - name: Enable QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Buildx builder (required for multi-arch + cache)
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      # Auth to GHCR using GITHUB_TOKEN (no secret PAT needed)
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Create the final tag list:
      #   - gemc-<tag>-<os> (always)
      #   - gemc-latest-<os> (only for the "latest" per-OS candidate)
      - id: meta
        name: Generate tags & labels
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.discover.outputs.image }}
          tags: |
            type=raw,value=${{ matrix.tag }}-${{ matrix.os }}
            type=raw,value=latest-${{ matrix.os }},enable=${{ matrix.latest }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.description=GEMC image (${{ matrix.tag }} on ${{ matrix.os }})

      # Decide platforms per Dockerfile by inspecting its base image
      - name: Decide platforms from Dockerfile base
        id: plats
        shell: bash
        run: |
          set -euo pipefail
          BASE="$(awk 'toupper($1)=="FROM"{print $2; exit}' "${{ matrix.file }}")"
          echo "Base image: $BASE"
          if docker buildx imagetools inspect "$BASE" | grep -qE 'manifest\.list|image\.index'; then
            PLATS="linux/amd64,linux/arm64"
          else
            PLATS="linux/amd64"
          fi
          echo "platforms=$PLATS" >> "$GITHUB_OUTPUT"

      # Single build step for PRs AND main/tags
      - name: Build (PR loads; main/tags push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.file }}
          platforms: ${{ github.event_name == 'pull_request' && 'linux/amd64' || steps.plats.outputs.platforms }}
          load: ${{ github.event_name == 'pull_request' }}   # PR: load locally for log extraction
          push: ${{ github.event_name != 'pull_request' }}   # main/tags: push to GHCR
          tags: ${{ steps.meta.outputs.tags }}               # e.g., ghcr.io/gemc/gemc:dev3-ubuntu24
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Extract logs from the built image (use new tag names)
      - name: Extract /root/src/logs from image
        if: ${{ always() }}
        env:
          IMG_PRIMARY: ${{ needs.discover.outputs.image }}:${{ matrix.tag }}-${{ matrix.os }}
          IMG_LATEST:  ${{ needs.discover.outputs.image }}:latest-${{ matrix.os }}
        run: |
          set -euo pipefail
          mkdir -p ci-logs
          
          # Prefer the primary tag; fall back to latest-<os> if needed
          IMG="$IMG_PRIMARY"
          if ! docker image inspect "$IMG" >/dev/null 2>&1; then
            # Not local? try pull (main/tags). If still missing, try the latest alias.
            docker pull "$IMG" >/dev/null 2>&1 || true
            if ! docker image inspect "$IMG" >/dev/null 2>&1; then
              IMG="$IMG_LATEST"
              docker pull "$IMG" >/dev/null 2>&1 || true
            fi
          fi
          
          if docker image inspect "$IMG" >/dev/null 2>&1; then
            cid="$(docker create "$IMG" true || true)"
            if [ -n "${cid:-}" ]; then
              docker cp "$cid":/root/src/logs/. ci-logs/ 2>/dev/null || true
              docker rm -v "$cid" >/dev/null 2>&1 || true
            fi
          else
            echo "Image unavailable (likely build failed before image existed)."
          fi
          
          ls -l ci-logs || true

      - name: Upload build logs artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.tag }}-${{ matrix.os }}
          path: |
            ci-logs/setup.log
            ci-logs/build.log
            ci-logs/test.log
          if-no-files-found: ignore
          retention-days: 14

      - name: Summarize image reference
        if: ${{ always() }}
        env:
          IMAGE: ${{ needs.discover.outputs.image }}
          PRIMARY_TAG: ${{ matrix.tag }}-${{ matrix.os }}
          LATEST_TAG: latest-${{ matrix.os }}
          IS_LATEST: ${{ matrix.latest }}
          PUSHED: ${{ github.event_name != 'pull_request' }}
        run: |
          PLATFORM_HINT=""
          if [ "$SUPPORTED_PLATFORMS" = "linux/amd64" ]; then
            # amd64-only image (e.g., Alma). Suggest --platform for Apple Silicon users.
            PLATFORM_HINT="--platform=linux/amd64"
          fi
          {
            echo "## Docker Image"
            if [ "$PUSHED" = "true" ]; then
              echo ""
              echo "**Primary tag:** \`$IMAGE:$PRIMARY_TAG\`"
              if [ "$IS_LATEST" = "true" ]; then
                echo ""
                echo "**Alias:** \`$IMAGE:$LATEST_TAG\`"
              fi
              echo ""
              echo "### Pull"
              echo '```bash'
              echo "docker pull $IMAGE:$PRIMARY_TAG"
              echo '```'
              echo "### Run"
              echo '```bash'
              echo "docker run --rm -it $IMAGE:$PRIMARY_TAG bash"
              echo '```'
              echo "### Run (Apple Silicon Mac)"
              echo '```bash'
              echo "docker run --rm -it $PLATFORM_HINT $IMAGE:$PRIMARY_TAG bash"
              echo '```'
            else
              echo ""
              echo "_PR build (image not pushed). Loaded locally on the runner with tags:_"
              echo '```'
              # Show every tag we applied locally (one per line)
              printf '%s\n' "${{ steps.meta.outputs.tags }}"
              echo '```'
              echo "To pull later (after merge to main):"
              echo '```bash'
              echo "docker pull $IMAGE:$PRIMARY_TAG"
              echo '```'
            fi
          } >> "$GITHUB_STEP_SUMMARY"
