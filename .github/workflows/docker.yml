name: Build & Publish GitHub Container Registry (GHCR) Images

on:
  push:
    branches: [ main ]
    tags:     [ 'v*' ]
  pull_request:

concurrency:
  group: ghcr-${{ github.ref }}
  cancel-in-progress: true

jobs:
  discover:
    name: Discover Dockerfiles
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.scan.outputs.matrix }}
      image:  ${{ steps.scan.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - id: scan
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const dir = 'dockerfiles';
            const entries = fs.existsSync(dir) ? fs.readdirSync(dir) : [];
            const rows = [];
            for (const f of entries) {
              if (!f.startsWith('Dockerfile-gemc-')) continue;
              // Expected: Dockerfile-gemc-<tag>-<os>
              const rest = f.replace(/^Dockerfile-/, ''); // "gemc-<tag>-<os>"
              const m = /^gemc-([^-]+)-(.+)$/.exec(rest);
              if (!m) { core.warning(`Skipping ${f}`); continue; }
              const tag = m[1];
              const os  = m[2];
              const weight = ((tag.match(/(\d+)$/) || [])[1] ?? '0')|0; // numeric suffix, default 0
              rows.push({ file: path.join(dir, f), tag, os, weight });
            }
            if (!rows.length) core.setFailed(`No matching dockerfiles in ${dir}`);

            // Choose "latest" per OS by highest weight
            const maxByOS = {};
            for (const r of rows) {
              if (!(r.os in maxByOS) || r.weight > maxByOS[r.os]) maxByOS[r.os] = r.weight;
            }
            const include = rows.map(r => ({ file: r.file, tag: r.tag, os: r.os, latest: r.weight === maxByOS[r.os] }));

            core.setOutput('matrix', JSON.stringify({ include }));
            core.setOutput('image', `ghcr.io/${process.env.GITHUB_REPOSITORY_OWNER.toLowerCase()}/gemc`);

  build:
    name: Build ${{ matrix.tag }} on ${{ matrix.os }}
    needs: discover
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        name: Generate tags/labels (incl. latest alias)
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.discover.outputs.image }}
          tags: |
            type=raw,value=gemc-${{ matrix.tag }}-${{ matrix.os }}
            type=raw,value=gemc-latest-${{ matrix.os }},enable=${{ matrix.latest }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.description=GEMC image (${{ matrix.tag }} on ${{ matrix.os }})

      - name: Build (PR) or Build+Push (main/tags)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.file }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
