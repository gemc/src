# Build & Publish GitHub Container Registry (GHCR) Images
name: Build And Test Images

on:
  push:
    branches: [ main ]   # publish on main updates
    tags: [ 'v*' ]       # also publish on version tags
  pull_request:          # PRs: build only (no push)

jobs:
  overview:
    name: Workflow Overview
    runs-on: ubuntu-latest
    steps:
      - name: Write overview
        shell: bash
        run: |
          : "${GITHUB_STEP_SUMMARY:=$RUNNER_TEMP/summary.md}"
          {
            echo "# GEMC Images — Overview"
            echo "Repository: [gemc images](https://github.com/gemc/src/pkgs/container/gemc)"
            echo ""
            echo ""
            echo "Set these convenience variables to run docker (choose your own password)"
            echo '```bash'
            echo 'VPORTS=(-p 6080:6080 -p 5900:5900)'
            echo 'VNC_PASS=(-e X11VNC_PASSWORD=change-me)'
            echo 'VNC_BIND=(-e VNC_BIND=0.0.0.0)'
            echo '```'
            echo ""
            echo "For amd64 CPUS (for example, MacOS silicon):"
            echo '```bash'
            echo 'VPLATFORM="--platform=linux/amd64"'
            echo '```'
            echo "---"
          } >> "$GITHUB_STEP_SUMMARY"

  discover:
    name: Create Dockerfiles
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.scan.outputs.matrix }}
      image: ${{ steps.scan.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - id: scan
        name: Build matrix
        run: ci/distros_tags.sh

  # ===========================
  # Per-arch build jobs
  # ===========================
  build_amd64:
    name: Build amd64 from ${{ matrix.image }}
    needs: [ overview, discover ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        name: Docker metadata (base tag)
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.discover.outputs.image }}
          tags: |
            type=raw,value=${{ format('{0}-{1}', matrix.gemc_tag, matrix.osname) }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.description=GEMC image (${{ matrix.gemc_tag }}, Geant4: ${{ matrix.geant4_tag }}) on ${{ matrix.image }})

      - name: Generate Dockerfile
        run: |
          python3 ci/dockerfile_creator.py \
          -i "${{ matrix.image }}" \
          -t "${{ matrix.gemc_tag }}" \
          > Dockerfile.generated
          cat Dockerfile.generated

      - name: Get upstream commit
        run: echo "UPSTREAM_REV=$(git ls-remote https://github.com/gemc/src HEAD | cut -f1)" >> $GITHUB_ENV

      - name: Build & Push (amd64 only)
        uses: docker/build-push-action@v5
        with:
          build-args: |
            UPSTREAM_REV=${{ env.UPSTREAM_REV }}
          context: .
          file: ./Dockerfile.generated
          platforms: linux/amd64
          push: true
          # Add -amd64 suffix to the arch-specific image tag
          tags: ${{ steps.meta.outputs.tags }}-amd64
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ needs.discover.outputs.image }}:cache-amd64
          cache-to: type=registry,ref=${{ needs.discover.outputs.image }}:cache-amd64,mode=max

      - name: Summary
        if: ${{ always() }}
        shell: bash
        env:
          IMAGE: ${{ needs.discover.outputs.image }}
          TAG: ${{ format('{0}-{1}', matrix.gemc_tag, matrix.osname) }}
        run: |
          OUT="$RUNNER_TEMP/summary.md"
          : "${GITHUB_STEP_SUMMARY:=$RUNNER_TEMP/step_summary.md}"
          {
            echo "## \`${TAG}\`"
            echo ""
            echo "### Pull"
            echo '```bash'
            echo "docker pull \$VPLATFORM ${IMAGE}:${TAG}"
            echo '```'
            echo ""
            echo "### Run interactive shell"
            echo '```bash'
            echo "docker run --rm -it \$VPLATFORM ${IMAGE}:${TAG} bash -l"
            echo '```'
            echo ""
            echo "### Run with VNC/noVNC"
            echo "_VNC → localhost:5900 (password: change-me)_"
            echo "_noVNC → http://localhost:6080/vnc.html (password: change-me)_"
            echo '```bash'
            echo "docker run --rm -it \$VPLATFORM \$VPORTS \$VNC_BIND \$VNC_PASS ${IMAGE}:${TAG}"
            echo '```'
          } | tee -a "$GITHUB_STEP_SUMMARY" > "$OUT"

      - name: Upload summary artifact (amd64)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: summary-${{ matrix.gemc_tag }}-${{ matrix.osname }}-amd64
          path: ${{ runner.temp }}/summary.md
          if-no-files-found: ignore

  # build_arm64 job header
  build_arm64:
    name: Build arm64 from ${{ matrix.image }}
    needs: [overview, discover]
    runs-on: ubuntu-24.04-arm   # <— use native ARM64 runner
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover.outputs.matrix) }}


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Optional: say why we’re skipping
      - name: Skip note (archlinux is amd64-only)
        if: ${{ matrix.image == 'archlinux' }}
        run: echo "Skipping arm64 build for archlinux"

      - name: Set up Buildx
        if: ${{ matrix.image != 'archlinux' }}
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: ${{ matrix.image != 'archlinux' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        if: ${{ matrix.image != 'archlinux' }}
        name: Docker metadata (base tag)
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.discover.outputs.image }}
          tags: |
            type=raw,value=${{ format('{0}-{1}', matrix.gemc_tag, matrix.osname) }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.description=GEMC image (${{ matrix.gemc_tag }}, Geant4: ${{ matrix.geant4_tag }}) on ${{ matrix.image }})

      - name: Generate Dockerfile
        if: ${{ matrix.image != 'archlinux' }}
        run: |
          python3 ci/dockerfile_creator.py \
          -i "${{ matrix.image }}" \
          -t "${{ matrix.gemc_tag }}" \
          > Dockerfile.generated
          cat Dockerfile.generated

      - name: Get upstream commit
        if: ${{ matrix.image != 'archlinux' }}
        run: echo "UPSTREAM_REV=$(git ls-remote https://github.com/gemc/src HEAD | cut -f1)" >> $GITHUB_ENV

      - name: Build & Push (arm64 only)
        if: ${{ matrix.image != 'archlinux' }}
        uses: docker/build-push-action@v5
        with:
          build-args: |
            UPSTREAM_REV=${{ env.UPSTREAM_REV }}
          context: .
          file: ./Dockerfile.generated
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}-arm64
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ needs.discover.outputs.image }}:cache-arm64
          cache-to: type=registry,ref=${{ needs.discover.outputs.image }}:cache-arm64,mode=max

  # ===========================
  # Manifest stitch (same matrix)
  # ===========================
  manifest:
    name: Manifest for ${{ matrix.image }}
    needs: [ build_amd64, build_arm64, discover ]
    runs-on: ubuntu-latest
    # If arm64 was skipped (e.g., archlinux), still publish amd64-only manifest.
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover.outputs.matrix) }}
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        name: Docker metadata (base tag)
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.discover.outputs.image }}
          tags: |
            type=raw,value=${{ format('{0}-{1}', matrix.gemc_tag, matrix.osname) }}

      - name: Create multi-arch manifest
        shell: bash
        run: |
          BASE_TAG="${{ steps.meta.outputs.tags }}"
          AMD_TAG="${BASE_TAG}-amd64"
          ARM_TAG="${BASE_TAG}-arm64"

          # If the arm64 build was skipped (e.g., archlinux), only include amd64
          if docker buildx imagetools inspect "$ARM_TAG" >/dev/null 2>&1; then
            docker buildx imagetools create -t "$BASE_TAG" "$AMD_TAG" "$ARM_TAG"
          else
            docker buildx imagetools create -t "$BASE_TAG" "$AMD_TAG"
          fi

      - name: Summary (manifest)
        if: ${{ always() }}
        shell: bash
        env:
          IMAGE: ${{ needs.discover.outputs.image }}
          TAG: ${{ format('{0}-{1}', matrix.gemc_tag, matrix.image) }}
        run: |
          : "${GITHUB_STEP_SUMMARY:=$RUNNER_TEMP/manifest_summary.md}"
          {
            echo "## \`${IMAGE}:${TAG}\`"
            echo ""
            echo "Includes:"
            if docker buildx imagetools inspect "${IMAGE}:${TAG}-amd64" >/dev/null 2>&1; then echo "- amd64"; fi
            if docker buildx imagetools inspect "${IMAGE}:${TAG}-arm64" >/dev/null 2>&1; then echo "- arm64"; else echo "- arm64 (skipped)"; fi
            echo ""
            echo "### Pull"
            echo '```bash'
            echo "docker pull \$VPLATFORM ${IMAGE}:${TAG}"
            echo '```'
            echo ""
            echo "### Run (interactive)"
            echo '```bash'
            echo "docker run --rm -it \$VPLATFORM ${IMAGE}:${TAG} bash -l"
            echo '```'
            echo ""
            echo "### Run with VNC/noVNC"
            echo "_VNC → localhost:5900 (password: change-me)_"
            echo "_noVNC → http://localhost:6080/vnc.html (password: change-me)_"
            echo '```bash'
            echo "docker run --rm -it \$VPLATFORM \$VPORTS \$VNC_BIND \$VNC_PASS ${IMAGE}:${TAG}"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

          # Also save a copy inside the workspace for artifact upload
          mkdir -p "$GITHUB_WORKSPACE/summaries"
          cp "$GITHUB_STEP_SUMMARY" "$GITHUB_WORKSPACE/summaries/summary-${{ matrix.gemc_tag }}-${{ matrix.image }}-${{ job.status }}.md" || true
          echo "Wrote $GITHUB_WORKSPACE/summaries/summary-${{ matrix.gemc_tag }}-${{ matrix.image }}.md"
          ls -l "$GITHUB_WORKSPACE/summaries"

      - name: Upload summary artifact (manifest)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: summary-${{ matrix.gemc_tag }}-${{ matrix.image }}-manifest
          path: ${{ runner.temp }}/manifest_summary.md
          if-no-files-found: ignore
