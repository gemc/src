working on gemc:

- divide source in different libraries like scons (started with gdetector)
- put the verbosity string options into conventions, like GSENSITIVITYVERBOSITY = "gsensitivityv"
- add system/detector browser
- add hipo output
- add display goodies like gemc2++


In General:

- event reproducibility
- keep chasing using namespace;
- rule of 5.
- add section "fromScratch" to redo project and targets from scratch in the notes
- go over constructors: is it move, copy, construct from scratch?
- only load env needed by each library, see glibrary todo
- examples/advanced/doiPET/README



Gemc Details:

- catalogue exit codes across libraries: find in project #define EC__
- use gConstruct gDestruct;
- later down the road: compare map vs unordered_map speed and memory usage.
- gopts must be shared ptr so it can be used in the local threads
- account for detector dependencies: for example cadbeamline needs fc
- streamData instead of EventData. How to organize this?
- check examples for new GHitsCollection(sdName, collectionName[0]) in which perhaps there are multiple hit collections and collectionName[1] is used
- if decisionToSkipHit, return true or false? check examples?


- checkout fun4all tutorial:
  - https://eic-detector.github.io/tutorials_example2_JLab.html





